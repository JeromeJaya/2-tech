import mongoose, { Schema } from 'mongoose';

const BookingSchema = new Schema(
  {
    booking_id: {
      type: String,
      required: true,
      unique: true,
    },
    applicant_name: {
      type: String,
      required: [true, 'Applicant name is required'],
      trim: true,
    },
    contact: {
      type: String,
      required: [true, 'Contact number is required'],
      trim: true,
    },
    email: {
      type: String,
      lowercase: true,
      trim: true,
      match: [/^\S+@\S+\.\S+$/, 'Please provide a valid email'],
    },
    address: {
      type: String,
      trim: true,
    },
    event_type: {
      type: String,
      required: [true, 'Event type is required'],
      trim: true,
    },
    birthday_name: {
      type: String,
      trim: true,
    },
    couple_name1: {
      type: String,
      trim: true,
    },
    couple_name2: {
      type: String,
      trim: true,
    },
    bride_name: {
      type: String,
      trim: true,
    },
    groom_name: {
      type: String,
      trim: true,
    },
    plan_type: {
      type: String,
      required: [true, 'Plan type is required'],
      enum: ['basic', 'premium', 'elite'],
    },
    event_date: {
      type: String,
      required: [true, 'Event date is required'],
    },
    time_slot: {
      type: String,
      required: [true, 'Time slot is required'],
    },
    guests: {
      type: Number,
      required: [true, 'Number of guests is required'],
      min: 1,
    },
    decoration_id: {
      type: String,
      required: [true, 'Decoration is required'],
    },
    decoration_name: {
      type: String,
    },
    decoration_price: {
      type: Number,
      default: 0,
    },
    base_price: {
      type: Number,
      default: 0,
    },
    addons_price: {
      type: Number,
      default: 0,
    },
    total_amount: {
      type: Number,
      required: [true, 'Total amount is required'],
      min: 0,
    },
    advance_paid: {
      type: Number,
      default: 0,
    },
    balance_amount: {
      type: Number,
      default: 0,
    },
    status: {
      type: String,
      enum: ['pending', 'confirmed', 'completed', 'cancelled'],
      default: 'pending',
    },
    payment_status: {
      type: String,
      enum: ['pending', 'advance_paid', 'partial', 'completed', 'failed'],
      default: 'pending',
    },
    led_light_name: {
      type: String,
    },
    age_light_age: {
      type: Number,
    },
    selected_addons: {
      type: String, // JSON string
    },
    balloon_colors: {
      type: String, // JSON string
    },
    qr_code_data: {
      type: String,
    },
    is_verified: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
BookingSchema.index({ booking_id: 1 });
BookingSchema.index({ contact: 1 });
BookingSchema.index({ event_date: 1 });
BookingSchema.index({ status: 1 });
BookingSchema.index({ createdAt: -1 });

// Note: booking_id is generated by frontend (C3-timestamp format)
// No need for pre-save hook

export default mongoose.model('Booking', BookingSchema);
